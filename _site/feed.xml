<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 02 Jun 2019 21:07:36 +0800</pubDate>
    <lastBuildDate>Sun, 02 Jun 2019 21:07:36 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Java Security Providers</title>
        <description>&lt;p&gt;#java.security&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;security.provider.1=sun.security.provider.Sun
security.provider.2=sun.security.rsa.SunRsaSign
security.provider.3=sun.security.ec.SunEC
security.provider.4=com.sun.net.ssl.internal.ssl.Provider
security.provider.5=com.sun.crypto.provider.SunJCE
security.provider.6=sun.security.jgss.SunProvider
security.provider.7=com.sun.security.sasl.Provider
security.provider.8=org.jcp.xml.dsig.internal.dom.XMLDSigRI
security.provider.9=sun.security.smartcardio.SunPCSC
security.provider.10=sun.security.mscapi.SunMSCAPI&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;#Configure BCFIPS&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Security.insertProviderAt(bcFipsProvider, 1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;将org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider插入到provider的第一位。jcajce主要用于加密解密。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Provider sunJSSE = new com.sun.net.ssl.internal.ssl.Provider(bcFipsProvider);
Security.addProvider(sunJSSE);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;SunJSSE是Sun实现的ssl框架。
为SunJSSE配置FIPS 算法实现，此时SunJSSE即为FIPS模式。&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/06/02/java-security-providers/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/02/java-security-providers/</guid>
        
        <category>java</category>
        
        <category>security</category>
        
        
      </item>
    
      <item>
        <title>Java Memory</title>
        <description>&lt;ol&gt;
  &lt;li&gt;内存模型
主内存（堆内存）    本地内存
指令重排&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2.锁与volatile
对volatile的读写与锁的加锁、解锁有相同的语义
把本地内存置为无效，然后读取共享内存&lt;/p&gt;

</description>
        <pubDate>Sun, 02 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/06/02/java-memory/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/02/java-memory/</guid>
        
        <category>java</category>
        
        
      </item>
    
      <item>
        <title>Client Validate Certificate</title>
        <description>&lt;p&gt;java提供了工具用来支持校验certificate，包括证书的属性校验以及revocation校验。&lt;/p&gt;

&lt;p&gt;##Revocation校验
证书的revocation 校验主要有三种方式：
  1.自己提供CRLfiles
  2.通过证书内的CRLDP属性下载CRL files 然后做检查
  3.将待检查的证书发给证书内的OCSP地址，然后检查返回结果&lt;/p&gt;

&lt;p&gt;~~~Security.setProperty(“ocsp.enable”, “true”);
            System.setProperty(“com.sun.security.enableCRLDP”,”true”);
            List&lt;X509Certificate&gt; certList = Arrays.asList(x509Certificates);
            Set&lt;TrustAnchor&gt; trustAnchors = new HashSet&lt;TrustAnchor&gt;();
            for (X509Certificate trustedRootCert : getAcceptedIssuers()) {
                trustAnchors.add(new TrustAnchor(trustedRootCert, null));
            }
            PKIXBuilderParameters params = new PKIXBuilderParameters(trustAnchors, new X509CertSelector());
            params.addCertStore(CertStore.getInstance(&quot;Collection&quot;, new CollectionCertStoreParameters(SSLHelper.loadCRL())));
            CertificateFactory cf = CertificateFactory.getInstance(&quot;X.509&quot;);
            CertPath certPath = cf.generateCertPath(certList);
            CertPathValidator certPathValidator = CertPathValidator.getInstance(CertPathValidator.getDefaultType());
            PKIXRevocationChecker revocationChecker = (PKIXRevocationChecker) certPathValidator.getRevocationChecker();
            revocationChecker.setOptions(EnumSet.of(PKIXRevocationChecker.Option.SOFT_FAIL));
            params.addCertPathChecker(revocationChecker);
            certPathValidator.validate(certPath, params);&lt;/TrustAnchor&gt;&lt;/TrustAnchor&gt;&lt;/X509Certificate&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;##SunJSSE的实现:
 validate方法会调用一系列的checker做证书检查，包括RevocationChecker，Basic Checker

##BouncyCastleFIPS实现：
目前所有的校验都写到了org.bouncycastle.jcajce.provider.PKIXCertPathValidatorSpi#engineValidate 这一个方法里，暂时没有实现java.security.cert.CertPathValidatorSpi#engineGetRevocationChecker方法。

##FIPS 模式下client端如何对server的证书进行校验
背景：
SunJSSE在FIPS 模式下不允许对x509trustmanager进行扩展。
解决方案：
在TrustManagerFactory初始化时传入PKIXBuilderParameters 。
对于需要检查的证书参数，将其传入X509CertSelector中。
X509CertSelector 只会作用于user certificate.(BCFIPS源码)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    X509CertSelector x509CertSelector = new X509CertSelector();
    x509CertSelector.setKeyUsage(new boolean[]{true,false,true});
    x509CertSelector.setExtendedKeyUsage(Sets.newHashSet(EXTENDED_KEY_SERVER_AUTHENTICATION,EXTENDED_KEY_CLIENT_AUTHENTICATION));
    PKIXBuilderParameters params = new PKIXBuilderParameters(ts, x509CertSelector);
    params.addCertStore(CertStore.getInstance(&quot;Collection&quot;, new CollectionCertStoreParameters(SSLHelper.loadCRL())));
    params.setRevocationEnabled(true);
    tmf.init(new CertPathTrustManagerParameters(params)); ~~~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 02 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/06/02/client-validate-certificate-chain-sent-from-server-side/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/02/client-validate-certificate-chain-sent-from-server-side/</guid>
        
        <category>java</category>
        
        <category>security</category>
        
        
      </item>
    
      <item>
        <title>OpenSSL Create Certificate</title>
        <description>&lt;p&gt;参考：https://netnix.org/2014/04/06/self-signed-ca-with-crl-for-java-code-signing/&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.下载openssl&lt;/strong&gt;
&lt;strong&gt;2.配置openssl.cfg 文件&lt;/strong&gt;
***
RANDFILE = .rnd&lt;/p&gt;

&lt;p&gt;[ req ]
default_md                = sha256
distinguished_name        = req_distinguished_name&lt;/p&gt;

&lt;p&gt;[ req_distinguished_name ]
countryName               = Country Name (2 letter code)
countryName_min           = 2
countryName_max           = 2
stateOrProvinceName       = State or Province Name (full name)
localityName              = Locality Name (eg, city)
0.organizationName        = Organization Name (eg, company)
organizationalUnitName    = Organizational Unit Name (eg, section)
commonName                = Common Name (e.g. server FQDN or YOUR name)
commonName_max            = 64
emailAddress              = Email Address
emailAddress_max          = 64&lt;/p&gt;

&lt;p&gt;[ v3_req_sign ]
basicConstraints          = CA:FALSE
keyUsage                  = digitalSignature,keyEncipherment
extendedKeyUsage          = serverAuth, clientAuth, codeSigning
crlDistributionPoints     = URI:http://mydomain.com/ca.crl
subjectKeyIdentifier      = hash
authorityKeyIdentifier    = keyid, issuer
subjectAltName 						= @alt_names&lt;/p&gt;

&lt;p&gt;[ alt_names ]
DNS.1 = localhost
IP.1 = 10.5.41.95&lt;/p&gt;

&lt;p&gt;[ ca ]
default_ca                = ca
private_key               = caca.key
certificate               = caca.crt
database                  = C:\Users\huangyou.CORPDOM\Desktop\openssl\ca\index.txt
serial                    = C:\Users\huangyou.CORPDOM\Desktop\openssl\ca\serial
crl_extensions            = crl_ext
new_certs_dir             = C:\Users\huangyou.CORPDOM\Desktop\openssl\cacerts
default_md                = sha256
policy                    = policy_match&lt;/p&gt;

&lt;p&gt;[ policy_match ]
countryName               = optional
stateOrProvinceName       = optional
organizationName          = optional
organizationalUnitName    = optional
commonName                = supplied
emailAddress              = optional&lt;/p&gt;

&lt;p&gt;[ v3_ca ]
basicConstraints          = critical, CA:TRUE, pathlen:0
keyUsage                  = critical, cRLSign, keyCertSign
subjectKeyIdentifier      = hash
authorityKeyIdentifier    = keyid:always, issuer&lt;/p&gt;

&lt;p&gt;[ crl_ext ]
authorityKeyIdentifier    = keyid:always&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;3.命令行示例&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;1.生成一个enduser证书以及一个csr
“C:\Program Files\OpenSSL-Win64\bin\openssl.exe” req -new -newkey rsa:2048 -nodes -keyout enduser4.key -out enduser4.csr -config openssl.cfg&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;2.用CA sign csr。如果想要组装成证书链需要把ca的cert和此处生成的cert拼接起来
“C:\Program Files\OpenSSL-Win64\bin\openssl.exe” ca -create_serial -days 1095 -in enduser2.csr -out enduser2.crt -notext -extensions v3_req_sign -config op enssl.cfg&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;4.OpenSSL DB&lt;/strong&gt;
OpenSSL DB 就是index.txt文件
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/8158621-83b3b2b3aabf1a61.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;openssl_index.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一列： R 表示revoke, V表示Valid, E 表示Expired(需要update db)
第二列： 过期时间
第三列： 吊销时间戳（R状态下）
第四列： 证书序列号
第五列： subject name&lt;/p&gt;

&lt;p&gt;生成crl就是读取这个文件&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/8158621-568ae823249ff4b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Self-Signed CA with CRL for Java Code Signing netnix org.png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 02 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/06/02/OpenSSL-create-certificate-chain-and-CRL/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/02/OpenSSL-create-certificate-chain-and-CRL/</guid>
        
        <category>java</category>
        
        <category>security</category>
        
        <category>OpenSSL</category>
        
        
      </item>
    
  </channel>
</rss>
